#include <wiringPiI2C.h>
#include <math.h>
#include <unistd.h> // For usleep function

class PCA9685 {
private:
    int fd; // File descriptor for I2C device
    int address;
    static const int MODE1 = 0x00;
    static const int PRESCALE = 0xFE;
    static const int LED0_ON_L = 0x06;
    static const int LED0_OFF_L = 0x08;

    void write(int reg, int value) {
        wiringPiI2CWriteReg8(fd, reg, value);
    }

    int read(int reg) {
        return wiringPiI2CReadReg8(fd, reg);
    }

public:
    PCA9685(int address = 0x40) : address(address) {
        fd = wiringPiI2CSetup(address);
        write(MODE1, 0x00); // Initialize mode register to all zeros
    }

    void setPWMFreq(int freq) {
        float prescaleval = 25000000.0;
        prescaleval /= 4096.0;
        prescaleval /= float(freq);
        prescaleval -= 1.0;
        int prescale = floor(prescaleval + 0.5);

        int oldmode = read(MODE1);
        int newmode = (oldmode & 0x7F) | 0x10; // Sleep mode
        write(MODE1, newmode);
        write(PRESCALE, prescale);
        write(MODE1, oldmode);
        usleep(5000); // Wait for oscillator to stabilize
        write(MODE1, oldmode | 0x80); // Restart
    }

    void setPWM(int channel, int on, int off) {
        write(LED0_ON_L + 4 * channel, on & 0xFF);
        write(LED0_ON_L + 4 * channel + 1, on >> 8);
        write(LED0_OFF_L + 4 * channel, off & 0xFF);
        write(LED0_OFF_L + 4 * channel + 1, off >> 8);
    }

    void setMotorPwm(int channel, int duty) {
        setPWM(channel, 0, duty);
    }

    void setServoPulse(int channel, int pulse) {
        pulse = pulse * 4096 / 20000; // Convert pulse to PWM value
        setPWM(channel, 0, pulse);
    }
};
