#ifndef MOTOR_H
#define MOTOR_H

#include <cmath> // For math functions
#include <iostream> // For standard I/O
#include <thread> // For sleep functionality
#include <chrono> // For duration types

// Assuming you have a PCA9685 and ADC C++ library similar to your Python code
#include "PCA9685.h" // You need to have this library
#include "ADC.h" // And this one

class Motor {
private:
    PCA9685 pwm;
    float time_proportion = 2.5; // Depending on your car, adjust as necessary
    ADC adc;

public:
    Motor() : pwm(0x40, true) { // Initialize PCA9685 with address 0x40 and debug enabled
        pwm.setPWMFreq(50); // Set frequency to 50Hz
    }

    // Ensure the duty cycle is within the range -4095 to 4095
    int duty_range(int duty) {
        if (duty > 4095) return 4095;
        if (duty < -4095) return -4095;
        return duty;
    }

    void left_Upper_Wheel(int duty) {
        duty = duty_range(duty);
        if (duty > 0) {
            pwm.setMotorPwm(0, 0);
            pwm.setMotorPwm(1, duty);
        } else if (duty < 0) {
            pwm.setMotorPwm(1, 0);
            pwm.setMotorPwm(0, std::abs(duty));
        } else {
            pwm.setMotorPwm(0, 4095);
            pwm.setMotorPwm(1, 4095);
        }
    }

    // Define similar methods for left_Lower_Wheel, right_Upper_Wheel, and right_Lower_Wheel

    void setMotorModel(int duty1, int duty2, int duty3, int duty4) {
        left_Upper_Wheel(duty1);
        // Call the respective methods for other wheels with duty2, duty3, and duty4
    }

    void Rotate(float n) {
        float angle = n;
        float bat_compensate = 7.5 / (adc.recvADC(2) * 3);
        while (true) {
            int W = 2000;
            int VY = int(2000 * std::cos(std::radians(angle)));
            int VX = -int(2000 * std::sin(std::radians(angle)));

            int FR = VY - VX + W;
            int FL = VY + VX - W;
            int BL = VY - VX - W;
            int BR = VY + VX + W;

            setMotorModel(FL, BL, FR, BR);
            std::cout << "rotating" << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(int(5 * time_proportion * bat_compensate)));
            angle -= 5;
        }
    }
};

#endif // MOTOR_H
